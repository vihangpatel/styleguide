function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import reduce from 'lodash/reduce';
import isPlainObject from 'lodash/isPlainObject';

import arrayifyValue from './arrayifyValue';

export default function createMergeArrayStyle(mergeProps) {
  return function mergeArrayStyle(base) {
    for (var _len = arguments.length, extendingStyles = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      extendingStyles[_key - 1] = arguments[_key];
    }

    return reduce(extendingStyles, function (mergedStyle, style) {
      return reduce(style, function (merged, value, property) {
        var baseValue = merged[property];

        if (baseValue && (!mergeProps || mergeProps.indexOf(property) !== -1)) {
          merged[property] = [].concat(_toConsumableArray(arrayifyValue(baseValue)), _toConsumableArray(arrayifyValue(value)));
        } else if (isPlainObject(baseValue) && isPlainObject(value)) {
          merged[property] = mergeArrayStyle({}, baseValue, value);
        } else {
          merged[property] = value;
        }

        return merged;
      }, mergedStyle);
    }, base);
  };
}