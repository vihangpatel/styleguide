'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _srraf = require('srraf');

var _srraf2 = _interopRequireDefault(_srraf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @param {HTMLElement} node
 * @param {number} threshold Pixels outside viewport to fire
 * @param {number} y Current page scroll position
 */
function inViewport(node, threshold, y) {
  var windowHeight = window.innerHeight;
  var viewTop = y;
  var viewBot = viewTop + windowHeight;

  var nodeTop = node.getBoundingClientRect().top + y;
  var nodeBot = nodeTop + node.offsetHeight;

  var offset = threshold / 100 * windowHeight;

  return nodeBot >= viewTop - offset && nodeTop <= viewBot + offset;
}

/**
 * @param {number} threshold
 */

var Visibl = function (_React$Component) {
  _inherits(Visibl, _React$Component);

  function Visibl(props) {
    _classCallCheck(this, Visibl);

    var _this = _possibleConstructorReturn(this, (Visibl.__proto__ || Object.getPrototypeOf(Visibl)).call(this, props));

    _this.state = {
      visible: false
    };
    return _this;
  }

  _createClass(Visibl, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var node = (0, _reactDom.findDOMNode)(this);

      this.scroller = _srraf2.default.use(function (_ref) {
        var currY = _ref.currY;

        var visible = inViewport(node, _this2.props.threshold || 0, currY);
        if (visible && !_this2.state.visible) {
          _this2.setState({
            visible: true
          });
        } else if (!visible && _this2.state.visible) {
          _this2.setState({
            visible: false
          });
        }
      }).update();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.scroller) {
        this.scroller.destroy();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return typeof this.props.children === 'function' ? this.props.children(this.state.visible) : _react2.default.cloneElement(this.props.children, this.state);
    }
  }]);

  return Visibl;
}(_react2.default.Component);

exports.default = Visibl;