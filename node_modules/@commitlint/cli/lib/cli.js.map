{"version":3,"sources":["../src/cli.js"],"names":["require","core","chalk","meow","merge","pick","stdin","pkg","help","configuration","string","boolean","alias","c","d","e","f","t","q","h","v","x","p","description","color","cwd","edit","extends","from","to","quiet","default","process","unknown","arg","Error","cli","name","version","main","catch","setTimeout","err","type","exit","options","raw","input","flags","normalizeFlags","fromStdin","checkFromStdin","range","fmt","constructor","enabled","read","messages","Array","isArray","filter","message","Boolean","length","checkFromRepository","console","log","Promise","all","map","load","getSeed","loaded","parserOpts","selectParserOpts","parserPreset","opts","undefined","lint","rules","report","formatted","format","grey","bold","split","join","errors","error","checkFromHistory","checkFromEdit","seed","n","i","on","reason","promise"],"mappings":"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","file":"cli.js","sourcesContent":["\nrequire('babel-polyfill'); // eslint-disable-line import/no-unassigned-import\n\nconst core = require('@commitlint/core');\nconst chalk = require('chalk');\nconst meow = require('meow');\nconst {merge, pick} = require('lodash');\nconst stdin = require('get-stdin');\n\nconst pkg = require('../package');\nconst help = require('./help');\n\nconst configuration = {\n\tstring: ['cwd', 'from', 'to', 'edit', 'extends', 'parser-preset'],\n\tboolean: ['help', 'version', 'quiet', 'color'],\n\talias: {\n\t\tc: 'color',\n\t\td: 'cwd',\n\t\te: 'edit',\n\t\tf: 'from',\n\t\tt: 'to',\n\t\tq: 'quiet',\n\t\th: 'help',\n\t\tv: 'version',\n\t\tx: 'extends',\n\t\tp: 'parser-preset'\n\t},\n\tdescription: {\n\t\tcolor: 'toggle colored output',\n\t\tcwd: 'directory to execute in',\n\t\tedit:\n\t\t\t'read last commit message from the specified file or fallbacks to ./.git/COMMIT_EDITMSG',\n\t\textends: 'array of shareable configurations to extend',\n\t\tfrom: 'lower end of the commit range to lint; applies if edit=false',\n\t\tto: 'upper end of the commit range to lint; applies if edit=false',\n\t\tquiet: 'toggle console output',\n\t\t'parser-preset':\n\t\t\t'configuration preset to use for conventional-commits-parser'\n\t},\n\tdefault: {\n\t\tcolor: true,\n\t\tcwd: process.cwd(),\n\t\tedit: false,\n\t\tfrom: null,\n\t\tto: null,\n\t\tquiet: false\n\t},\n\tunknown(arg) {\n\t\tthrow new Error(`unknown flags: ${arg}`);\n\t}\n};\n\nconst cli = meow(\n\t{\n\t\thelp: `[input] reads from stdin if --edit, --from and --to are omitted\\n${help(\n\t\t\tconfiguration\n\t\t)}`,\n\t\tdescription: `${pkg.name}@${pkg.version} - ${pkg.description}`\n\t},\n\tconfiguration\n);\n\nmain(cli).catch(err =>\n\tsetTimeout(() => {\n\t\tif (err.type === pkg.name) {\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tthrow err;\n\t})\n);\n\nasync function main(options) {\n\tconst raw = options.input;\n\tconst flags = normalizeFlags(options.flags);\n\tconst fromStdin = checkFromStdin(raw, flags);\n\n\tconst range = pick(flags, 'edit', 'from', 'to');\n\tconst fmt = new chalk.constructor({enabled: flags.color});\n\n\tconst input = await (fromStdin\n\t\t? stdin()\n\t\t: core.read(range, {cwd: flags.cwd}));\n\n\tconst messages = (Array.isArray(input) ? input : [input])\n\t\t.filter(message => typeof message === 'string')\n\t\t.filter(Boolean);\n\n\tif (messages.length === 0 && !checkFromRepository(flags)) {\n\t\tconst err = new Error(\n\t\t\t'[input] is required: supply via stdin, or --edit or --from and --to'\n\t\t);\n\t\terr.type = pkg.name;\n\t\tconsole.log(`${cli.help}\\n`);\n\t\tconsole.log(err.message);\n\t\tthrow err;\n\t}\n\n\treturn Promise.all(\n\t\tmessages.map(async message => {\n\t\t\tconst loaded = await core.load(getSeed(flags), {cwd: flags.cwd});\n\t\t\tconst parserOpts = selectParserOpts(loaded.parserPreset);\n\t\t\tconst opts = parserOpts ? {parserOpts} : undefined;\n\t\t\tconst report = await core.lint(message, loaded.rules, opts);\n\t\t\tconst formatted = core.format(report, {color: flags.color});\n\n\t\t\tif (!flags.quiet) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${fmt.grey('â§—')}   input: ${fmt.bold(message.split('\\n')[0])}`\n\t\t\t\t);\n\t\t\t\tconsole.log(formatted.join('\\n'));\n\t\t\t}\n\n\t\t\tif (report.errors.length > 0) {\n\t\t\t\tconst error = new Error(formatted[formatted.length - 1]);\n\t\t\t\terror.type = pkg.name;\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t})\n\t);\n}\n\nfunction checkFromStdin(input, flags) {\n\treturn input.length === 0 && !checkFromRepository(flags);\n}\n\nfunction checkFromRepository(flags) {\n\treturn checkFromHistory(flags) || checkFromEdit(flags);\n}\n\nfunction checkFromEdit(flags) {\n\treturn Boolean(flags.edit);\n}\n\nfunction checkFromHistory(flags) {\n\treturn typeof flags.from === 'string' || typeof flags.to === 'string';\n}\n\nfunction normalizeFlags(flags) {\n\t// The `edit` flag is either a boolean or a string but we are only allowed\n\t// to specify one of them in minimist\n\tif (flags.edit === '') {\n\t\treturn merge({}, flags, {edit: true, e: true});\n\t}\n\n\treturn flags;\n}\n\nfunction getSeed(seed) {\n\tconst e = Array.isArray(seed.extends) ? seed.extends : [seed.extends];\n\tconst n = e.filter(i => typeof i === 'string');\n\treturn n.length > 0\n\t\t? {extends: n, parserPreset: seed.parserPreset}\n\t\t: {parserPreset: seed.parserPreset};\n}\n\nfunction selectParserOpts(parserPreset) {\n\tif (typeof parserPreset !== 'object') {\n\t\treturn undefined;\n\t}\n\n\tconst opts = parserPreset.opts;\n\n\tif (typeof opts !== 'object') {\n\t\treturn undefined;\n\t}\n\n\treturn opts.parserOpts;\n}\n\n// Catch unhandled rejections globally\nprocess.on('unhandledRejection', (reason, promise) => {\n\tconsole.log('Unhandled Rejection at: Promise ', promise, ' reason: ', reason);\n\tthrow reason;\n});\n"]}