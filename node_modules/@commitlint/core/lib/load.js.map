{"version":3,"sources":["../src/load.js"],"names":["w","a","b","Array","isArray","undefined","valid","input","seed","options","cwd","process","loadConfig","loaded","base","filepath","dirname","config","opts","extends","rules","parserPreset","resolvedParserPreset","name","path","require","extended","prefix","preset","Promise","all","map","key","item","value","entry","executedValue","reduce","registry","executed","explorer","rcExtensions","load","local"],"mappings":"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","file":"load.js","sourcesContent":["import path from 'path';\nimport cosmiconfig from 'cosmiconfig';\nimport {entries, merge, mergeWith, pick} from 'lodash';\nimport resolveFrom from 'resolve-from';\n\nimport executeRule from './library/execute-rule';\nimport resolveExtends from './library/resolve-extends';\n\nconst w = (a, b) => (Array.isArray(b) ? b : undefined);\nconst valid = input => pick(input, 'extends', 'rules', 'parserPreset');\n\nexport default async (seed = {}, options = {cwd: process.cwd()}) => {\n\tconst loaded = await loadConfig(options.cwd);\n\tconst base = loaded.filepath ? path.dirname(loaded.filepath) : options.cwd;\n\n\t// Merge passed config with file based options\n\tconst config = valid(merge(loaded.config, seed));\n\tconst opts = merge({extends: [], rules: {}}, pick(config, 'extends'));\n\n\t// Resolve parserPreset key\n\tif (typeof config.parserPreset === 'string') {\n\t\tconst resolvedParserPreset = resolveFrom(base, config.parserPreset);\n\n\t\tconfig.parserPreset = {\n\t\t\tname: config.parserPreset,\n\t\t\tpath: resolvedParserPreset,\n\t\t\topts: require(resolvedParserPreset)\n\t\t};\n\t}\n\n\t// Resolve extends key\n\tconst extended = resolveExtends(opts, {\n\t\tprefix: 'commitlint-config',\n\t\tcwd: base,\n\t\tparserPreset: config.parserPreset\n\t});\n\n\tconst preset = valid(mergeWith(extended, config, w));\n\n\t// Await parser-preset if applicable\n\tif (\n\t\ttypeof preset.parserPreset === 'object' &&\n\t\ttypeof preset.parserPreset.opts === 'object'\n\t) {\n\t\tpreset.parserPreset.opts = await preset.parserPreset.opts;\n\t}\n\n\t// Execute rule config functions if needed\n\tconst executed = await Promise.all(\n\t\t['rules']\n\t\t\t.map(key => {\n\t\t\t\treturn [key, preset[key]];\n\t\t\t})\n\t\t\t.map(async item => {\n\t\t\t\tconst [key, value] = item;\n\t\t\t\tconst executedValue = await Promise.all(\n\t\t\t\t\tentries(value || {}).map(entry => executeRule(entry))\n\t\t\t\t);\n\t\t\t\treturn [\n\t\t\t\t\tkey,\n\t\t\t\t\texecutedValue.reduce((registry, item) => {\n\t\t\t\t\t\tconst [key, value] = item;\n\t\t\t\t\t\tregistry[key] = value;\n\t\t\t\t\t\treturn registry;\n\t\t\t\t\t}, {})\n\t\t\t\t];\n\t\t\t})\n\t);\n\n\t// Merge executed config keys into preset\n\treturn executed.reduce((registry, item) => {\n\t\tconst [key, value] = item;\n\t\tregistry[key] = value;\n\t\treturn registry;\n\t}, preset);\n};\n\nasync function loadConfig(cwd) {\n\tconst explorer = cosmiconfig('commitlint', {\n\t\trcExtensions: true\n\t});\n\n\tconst local = await explorer.load(cwd);\n\n\tif (local) {\n\t\treturn local;\n\t}\n\n\treturn {};\n}\n"]}