{"version":3,"sources":["../src/lint.js"],"names":["message","rules","opts","valid","errors","warnings","undefined","parserOpts","parsed","results","filter","entry","level","map","name","config","when","value","rule","Boolean","result","length"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAAOA,OAAP;AAAA;AAAA,mBAWR,MAXQ,EAcR,OAdQ,EAwCR,MAxCQ,EAyCR,QAzCQ,EA6CR,KA7CQ;AAAgBC,OAAhB,2DAAwB,EAAxB;AAA4BC,MAA5B,2DAAmC,EAAnC;;AACd;AACA,MAAI,yBAAUF,OAAV,CAAJ,EAAwB;AACvB,kBAAO;AACNG,WAAO,IADD;AAENC,YAAQ,EAFF;AAGNC,cAAU;AAHJ,IAAP;AAKA;;AAED;AACe,yBAAM,qBAAML,OAAN,EAAeM,SAAf,EAA0BJ,KAAKK,UAA/B,CAAN;AAAA;AAATC,UAAN,GAAe,QAAf;;AAGMC,WAAN,GAAgB,qBAAQR,KAAR,EACdS,MADc,CACP,iBAAS;AAAA,+CACIC,KADJ;AAAA;AAAA,SACNC,KADM;;AAEhB,YAAOA,QAAQ,CAAf;AACA,KAJc,EAKdC,GALc,CAKV,iBAAS;AAAA,gDACUF,KADV;AAAA,SACNG,IADM;AAAA,SACAC,MADA;;AAAA,gDAEgBA,MAFhB;AAAA,SAENH,KAFM;AAAA,SAECI,IAFD;AAAA,SAEOC,KAFP;;AAIb;;;AACA,SAAIL,UAAU,CAAd,EAAiB;AAChB,aAAO,IAAP;AACA;;AAED,SAAMM,OAAO,gBAAgBJ,IAAhB,CAAb;;AATa,iBAUYI,KAAKV,MAAL,EAAaQ,IAAb,EAAmBC,KAAnB,CAVZ;AAAA;AAAA,SAUNd,KAVM;AAAA,SAUCH,OAVD;;AAYb,YAAO;AACNY,WADM;AAENT,WAFM;AAGNW,UAHM;AAINd;AAJM,MAAP;AAMA,KAvBc,EAwBdU,MAxBc,CAwBPS,OAxBO,CAAhB;;AA0BMf,UAAN,GAAeK,QAAQC,MAAR,CAAe;AAAA,YAAUU,OAAOR,KAAP,KAAiB,CAAjB,IAAsB,CAACQ,OAAOjB,KAAxC;AAAA,KAAf,CAAf;AACME,YAAN,GAAiBI,QAAQC,MAAR,CAChB;AAAA,YAAUU,OAAOR,KAAP,KAAiB,CAAjB,IAAsB,CAACQ,OAAOjB,KAAxC;AAAA,KADgB,CAAjB;;AAIMA,SAAN,GAAcC,OAAOiB,MAAP,KAAkB,CAAhC;;AAEA,mBAAO;AACNlB,UADM;AAENC,WAFM;AAGNC;AAHM,KAAP;AApCe;AAAA;AAAA;AAAA;AAXD;AAAA,C","file":"lint.js","sourcesContent":["import {entries} from 'lodash';\nimport isIgnored from './library/is-ignored';\nimport parse from './library/parse';\nimport implementations from './rules';\n\nexport default async (message, rules = {}, opts = {}) => {\n\t// Found a wildcard match, skip\n\tif (isIgnored(message)) {\n\t\treturn {\n\t\t\tvalid: true,\n\t\t\terrors: [],\n\t\t\twarnings: []\n\t\t};\n\t}\n\n\t// Parse the commit message\n\tconst parsed = await parse(message, undefined, opts.parserOpts);\n\n\t// Validate against all rules\n\tconst results = entries(rules)\n\t\t.filter(entry => {\n\t\t\tconst [, [level]] = entry;\n\t\t\treturn level > 0;\n\t\t})\n\t\t.map(entry => {\n\t\t\tconst [name, config] = entry;\n\t\t\tconst [level, when, value] = config;\n\n\t\t\t// Level 0 rules are ignored\n\t\t\tif (level === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst rule = implementations[name];\n\t\t\tconst [valid, message] = rule(parsed, when, value);\n\n\t\t\treturn {\n\t\t\t\tlevel,\n\t\t\t\tvalid,\n\t\t\t\tname,\n\t\t\t\tmessage\n\t\t\t};\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst errors = results.filter(result => result.level === 2 && !result.valid);\n\tconst warnings = results.filter(\n\t\tresult => result.level === 1 && !result.valid\n\t);\n\n\tconst valid = errors.length === 0;\n\n\treturn {\n\t\tvalid,\n\t\terrors,\n\t\twarnings\n\t};\n};\n"]}