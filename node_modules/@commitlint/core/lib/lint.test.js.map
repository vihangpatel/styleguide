{"version":3,"sources":["../src/lint.test.js"],"names":["t","throws","error","is","message","actual","true","valid","false","parserOpts","headerPattern"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,mBAAK,uBAAL,EAA8B,UAAMA,CAAN;AAAA;AAAA,MACvB,KADuB;AACf,yBAAMA,EAAEC,MAAF,CAAS,qBAAT,CAAN;AAAA;AAARC,SAAN,GAAc,QAAd;AACAF,MAAEG,EAAF,CAAKD,MAAME,OAAX,EAAoB,uBAApB;AADc;AAAA;AAAA;AAAA;AAAA;AADe;AAAA,CAA9B;;AAKA,mBAAK,2BAAL,EAAkC,UAAMJ,CAAN;AAAA;AAAA,MAC3B,KAD2B;AACnB,yBAAMA,EAAEC,MAAF,CAAS,oBAAK,EAAL,CAAT,CAAN;AAAA;AAARC,SAAN,GAAc,QAAd;AACAF,MAAEG,EAAF,CAAKD,MAAME,OAAX,EAAoB,uBAApB;AADc;AAAA;AAAA;AAAA;AAAA;AADmB;AAAA,CAAlC;;AAKA,mBAAK,sCAAL,EAA6C,UAAMJ,CAAN;AAAA;AAAA,MACtC,MADsC;AAC7B,yBAAM,oBAAK,UAAL,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AACAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AADe;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAA7C;;AAKA,mBAAK,2CAAL,EAAkD,UAAMP,CAAN;AAAA;AAAA,MAC3C,MAD2C;AAClC,yBAAM,oBAAK,UAAL,EAAiB;AACrC,gBAAa,CAAC,CAAD,EAAI,QAAJ,EAAc,CAAC,KAAD,CAAd;AADwB,GAAjB,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AAGAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AAHe;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA,CAAlD;;AAOA,mBAAK,0CAAL,EAAiD,UAAMP,CAAN;AAAA;AAAA,MAC1C,MAD0C;AACjC,yBAAM,oBAAK,UAAL,EAAiB;AACrC,gBAAa,CAAC,CAAD,EAAI,OAAJ,EAAa,CAAC,KAAD,CAAb;AADwB,GAAjB,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AAGAL,MAAEQ,KAAF,CAAQH,OAAOE,KAAf;AAHe;AAAA;AAAA;AAAA;AAAA;AADiC;AAAA,CAAjD;;AAOA,mBAAK,6CAAL,EAAoD,UAAMP,CAAN;AAAA;AAAA,MAC7C,MAD6C;AACpC,yBAAM,oBAAK,4BAAL,EAAmC;AACvD,iBAAc,CAAC,CAAD,EAAI,OAAJ;AADyC,GAAnC,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AAGAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AAHe;AAAA;AAAA;AAAA;AAAA;AADoC;AAAA,CAApD;;AAOA,mBAAK,mCAAL,EAA0C,UAAMP,CAAN;AAAA;AAAA,MACnC,MADmC;AAC1B,yBAAM,oBACpB,SADoB,EAEpB;AACC,gBAAa,CAAC,CAAD,EAAI,QAAJ,EAAc,CAAC,KAAD,CAAd,CADd;AAEC,iBAAc,CAAC,CAAD,EAAI,OAAJ;AAFf,GAFoB,EAMpB;AACCS,eAAY;AACXC,mBAAe;AADJ;AADb,GANoB,CAAN;AAAA;AAATL,UAAN,GAAe,QAAf;AAYAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AAZe;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA,CAA1C","file":"lint.test.js","sourcesContent":["import test from 'ava';\nimport lint from './lint';\n\ntest('throws without params', async t => {\n\tconst error = await t.throws(lint());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('throws with empty message', async t => {\n\tconst error = await t.throws(lint(''));\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('positive on stub message and no rule', async t => {\n\tconst actual = await lint('foo: bar');\n\tt.true(actual.valid);\n});\n\ntest('positive on stub message and adhered rule', async t => {\n\tconst actual = await lint('foo: bar', {\n\t\t'type-enum': [2, 'always', ['foo']]\n\t});\n\tt.true(actual.valid);\n});\n\ntest('negative on stub message and broken rule', async t => {\n\tconst actual = await lint('foo: bar', {\n\t\t'type-enum': [2, 'never', ['foo']]\n\t});\n\tt.false(actual.valid);\n});\n\ntest('positive on ignored message and broken rule', async t => {\n\tconst actual = await lint('Revert \"some bogus commit\"', {\n\t\t'type-empty': [2, 'never']\n\t});\n\tt.true(actual.valid);\n});\n\ntest('positive on stub message and opts', async t => {\n\tconst actual = await lint(\n\t\t'foo-bar',\n\t\t{\n\t\t\t'type-enum': [2, 'always', ['foo']],\n\t\t\t'type-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\theaderPattern: /^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t\t\t}\n\t\t}\n\t);\n\tt.true(actual.valid);\n});\n"]}