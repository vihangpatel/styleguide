'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _lodash = require('lodash');

var _isIgnored = require('./library/is-ignored');

var _isIgnored2 = _interopRequireDefault(_isIgnored);

var _parse = require('./library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _rules = require('./rules');

var _rules2 = _interopRequireDefault(_rules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (message) {
	var $args = arguments;return new Promise(function ($return, $error) {
		var rules, opts, parsed, results, errors, warnings, valid;
		rules = $args.length > 1 && $args[1] !== undefined ? $args[1] : {};
		opts = $args.length > 2 && $args[2] !== undefined ? $args[2] : {};

		// Found a wildcard match, skip
		if ((0, _isIgnored2.default)(message)) {
			return $return({
				valid: true,
				errors: [],
				warnings: []
			});
		}

		// Parse the commit message
		return Promise.resolve((0, _parse2.default)(message, undefined, opts.parserOpts)).then(function ($await_1) {
			try {
				parsed = $await_1;

				results = (0, _lodash.entries)(rules).filter(function (entry) {
					var _entry = (0, _slicedToArray3.default)(entry, 2),
					    _entry$ = (0, _slicedToArray3.default)(_entry[1], 1),
					    level = _entry$[0];

					return level > 0;
				}).map(function (entry) {
					var _entry2 = (0, _slicedToArray3.default)(entry, 2),
					    name = _entry2[0],
					    config = _entry2[1];

					var _config = (0, _slicedToArray3.default)(config, 3),
					    level = _config[0],
					    when = _config[1],
					    value = _config[2];

					// Level 0 rules are ignored


					if (level === 0) {
						return null;
					}

					var rule = _rules2.default[name];

					var _rule = rule(parsed, when, value),
					    _rule2 = (0, _slicedToArray3.default)(_rule, 2),
					    valid = _rule2[0],
					    message = _rule2[1];

					return {
						level,
						valid,
						name,
						message
					};
				}).filter(Boolean);

				errors = results.filter(function (result) {
					return result.level === 2 && !result.valid;
				});
				warnings = results.filter(function (result) {
					return result.level === 1 && !result.valid;
				});

				valid = errors.length === 0;

				return $return({
					valid,
					errors,
					warnings
				});
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
};

module.exports = exports['default'];
//# sourceMappingURL=lint.js.map