{"version":3,"sources":["../../src/rules/references-empty.test.js"],"names":["messages","plain","comment","reference","references","parsed","t","actual","expected","is"],"mappings":"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","file":"references-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport referencesEmpty from './references-empty';\n\nconst messages = {\n\tplain: 'foo: bar',\n\tcomment: 'foo: baz\\n#1 Comment',\n\treference: '#comment\\nfoo: baz \\nCloses #1',\n\treferences: '#comment\\nfoo: bar \\nCloses #1, #2, #3'\n};\n\nconst parsed = {\n\tplain: parse(messages.plain),\n\tcomment: parse(messages.comment),\n\treference: parse(messages.reference),\n\treferences: parse(messages.references)\n};\n\ntest('defaults to never and fails for plain', async t => {\n\tconst [actual] = referencesEmpty(await parsed.plain);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('defaults to never and succeeds for reference', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for comment with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.comment, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for comment with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.comment, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for reference with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for reference with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for references with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.references, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for references with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.references, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}