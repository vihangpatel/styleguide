{"version":3,"sources":["../../src/rules/subject-leading-capital.test.js"],"names":["messages","empty","with","without","parsed","t","actual","expected","is"],"mappings":"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","file":"subject-leading-capital.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport check from './subject-leading-capital';\n\nconst messages = {\n\tempty: 'chore:\\n',\n\twith: `chore: Subject\\n`,\n\twithout: `chore: subject\\n`\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\twith: parse(messages.with),\n\twithout: parse(messages.without)\n};\n\ntest('empty should succeed', async t => {\n\tconst [actual] = check(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty against \"always\" should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty against \"never\" should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with should succeed', async t => {\n\tconst [actual] = check(await parsed.with);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"always\" should succeed', async t => {\n\tconst [actual] = check(await parsed.with, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"never\" should fail', async t => {\n\tconst [actual] = check(await parsed.with, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without should fail', async t => {\n\tconst [actual] = check(await parsed.without, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"always\" should fail', async t => {\n\tconst [actual] = check(await parsed.without, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"never\" should succeed', async t => {\n\tconst [actual] = check(await parsed.without, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}