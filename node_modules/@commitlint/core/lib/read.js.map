{"version":3,"sources":["../src/read.js"],"names":["sander","getCommitMessages","SHALLOW_MESSAGE","join","settings","cwd","from","to","edit","getEditCommit","isShallow","Error","getHistoryCommits","options","opts","Promise","resolve","reject","data","on","push","chunk","toString","top","TypeError","shallow","editFilePath","readFile","editFile"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,M;;AAEZ;;;;;;;;kBAEeC,iB;;;AAEf,IAAMC,kBAAkB,CACvB,+CADuB,EAEvB,2CAFuB,EAGvB,mFAHuB,EAItBC,IAJsB,CAIjB,IAJiB,CAAxB;;AAMA;AACA;AACA,SAAeF,iBAAf,CAAiCG,QAAjC;AAAA;AAAA;AACQC,KADR,GAC+BD,QAD/B,CACQC,GADR,EACaC,IADb,GAC+BF,QAD/B,CACaE,IADb,EACmBC,EADnB,GAC+BH,QAD/B,CACmBG,EADnB,EACuBC,IADvB,GAC+BJ,QAD/B,CACuBI,IADvB;;;AAGC,MAAIA,IAAJ,EAAU;AACT,kBAAOC,cAAcJ,GAAd,EAAmBG,IAAnB,CAAP;AACA;;AAEG,yBAAME,UAAUL,GAAV,CAAN;AAAA;AAAJ,QAAI,QAAJ,EAA0B;AACzB,mBAAM,IAAIM,KAAJ,CAAUT,eAAV,CAAN;AACA;;AAED,mBAAOU,kBAAkB,EAACN,IAAD,EAAOC,EAAP,EAAlB,EAA8B,EAACF,GAAD,EAA9B,CAAP;AAJI;AAAA;AAAA;AAAA;AAPL;AAAA;;AAcA;AACA;AACA,SAASO,iBAAT,CAA2BC,OAA3B,EAA+C;AAAA,KAAXC,IAAW,uEAAJ,EAAI;;AAC9C,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,MAAMC,OAAO,EAAb;AACA,+BAAcL,OAAd,EAAuB,EAACR,KAAKS,KAAKT,GAAX,EAAvB,EACEc,EADF,CACK,MADL,EACa;AAAA,UAASD,KAAKE,IAAL,CAAUC,MAAMC,QAAN,CAAe,OAAf,CAAV,CAAT;AAAA,GADb,EAEEH,EAFF,CAEK,OAFL,EAEcF,MAFd,EAGEE,EAHF,CAGK,KAHL,EAGY,YAAM;AAChBH,WAAQE,IAAR;AACA,GALF;AAMA,EARM,CAAP;AASA;;AAED;AACA;AACA,SAAeR,SAAf,CAAyBL,GAAzB;AAAA;AAAA,MACO,GADP,EAOO,OAPP;AACa,yBAAM,wBAASA,GAAT,CAAN;AAAA;AAANkB,OAAN,GAAY,QAAZ;;AAEA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,mBAAM,IAAIC,SAAJ,CAAe,gCAA+BnB,GAAI,EAAlD,CAAN;AACA;;AAEKoB,WAAN,GAAgB,eAAKtB,IAAL,CAAUoB,GAAV,EAAe,cAAf,CAAhB;AACA,mBAAO,0BAAOE,OAAP,CAAP;AAPY;AAAA;AAAA;AAAA;AADb;AAAA;;AAWA;AACA;AACA,SAAehB,aAAf,CAA6BJ,GAA7B,EAAkCG,IAAlC;AAAA;AAAA,MACO,GADP,EAOO,YAPP,EAYO,QAZP;AACa,yBAAM,wBAASH,GAAT,CAAN;AAAA;AAANkB,OAAN,GAAY,QAAZ;;AAEA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,mBAAM,IAAIC,SAAJ,CAAe,gCAA+BnB,GAAI,EAAlD,CAAN;AACA;;AAEKqB,gBAAN,GACC,OAAOlB,IAAP,KAAgB,QAAhB,GACG,eAAKQ,OAAL,CAAaO,GAAb,EAAkBf,IAAlB,CADH,GAEG,eAAKL,IAAL,CAAUoB,GAAV,EAAe,qBAAf,CAHJ;;AAKiB,2BAAMvB,OAAO2B,QAAP,CAAgBD,YAAhB,CAAN;AAAA;AAAXE,cAAN,GAAiB,QAAjB;AACA,qBAAO,CAAE,GAAEA,SAASN,QAAT,CAAkB,OAAlB,CAA2B,IAA/B,CAAP;AADiB;AAAA;AAAA;AAAA;AAXL;AAAA;AAAA;AAAA;AADb;AAAA","file":"read.js","sourcesContent":["import path from 'path';\nimport exists from 'path-exists';\nimport gitRawCommits from '@marionebl/git-raw-commits';\nimport * as sander from '@marionebl/sander';\n\nimport toplevel from './library/toplevel';\n\nexport default getCommitMessages;\n\nconst SHALLOW_MESSAGE = [\n\t'Could not get git history from shallow clone.',\n\t'Use git fetch --unshallow before linting.',\n\t'Original issue: https://git.io/vyKMq\\n Refer to https://git.io/vyKMv for details.'\n].join('\\n');\n\n// Get commit messages\n// Object => Promise<Array<String>>\nasync function getCommitMessages(settings) {\n\tconst {cwd, from, to, edit} = settings;\n\n\tif (edit) {\n\t\treturn getEditCommit(cwd, edit);\n\t}\n\n\tif (await isShallow(cwd)) {\n\t\tthrow new Error(SHALLOW_MESSAGE);\n\t}\n\n\treturn getHistoryCommits({from, to}, {cwd});\n}\n\n// Get commit messages from history\n// Object => Promise<string[]>\nfunction getHistoryCommits(options, opts = {}) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst data = [];\n\t\tgitRawCommits(options, {cwd: opts.cwd})\n\t\t\t.on('data', chunk => data.push(chunk.toString('utf-8')))\n\t\t\t.on('error', reject)\n\t\t\t.on('end', () => {\n\t\t\t\tresolve(data);\n\t\t\t});\n\t});\n}\n\n// Check if the current repository is shallow\n// (cwd: string) => Promise<Boolean>\nasync function isShallow(cwd) {\n\tconst top = await toplevel(cwd);\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root from ${cwd}`);\n\t}\n\n\tconst shallow = path.join(top, '.git/shallow');\n\treturn exists(shallow);\n}\n\n// Get recently edited commit message\n// (cwd: string, edit: any) => Promise<Array<String>>\nasync function getEditCommit(cwd, edit) {\n\tconst top = await toplevel(cwd);\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root from ${cwd}`);\n\t}\n\n\tconst editFilePath =\n\t\ttypeof edit === 'string'\n\t\t\t? path.resolve(top, edit)\n\t\t\t: path.join(top, '.git/COMMIT_EDITMSG');\n\n\tconst editFile = await sander.readFile(editFilePath);\n\treturn [`${editFile.toString('utf-8')}\\n`];\n}\n"]}