
/* eslint-disable no-continue */
import isPlainObject from 'lodash/isPlainObject';
import reduce from 'lodash/reduce';
import cssifyObject from 'css-in-js-utils/lib/cssifyObject';
import { isSupport, isMediaQuery, isNestedSelector, isUndefinedValue, normalizeNestedProperty, processStyleWithPlugins, generateCombinedMediaQuery, generateCSSSelector, generateCSSRule, RULE_TYPE } from 'fela-utils';

import generateMonolithicClassName from './generateMonolithicClassName';

function useMonolithicRenderer(renderer) {
  var prettySelectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  renderer.prettySelectors = prettySelectors;

  // monolithic output can not be rehydrated
  renderer.enableRehydration = false;

  renderer._renderStyleToCache = function (className, style) {
    var pseudo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var media = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    var support = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

    var ruleSet = reduce(style, function (ruleset, value, property) {
      if (isPlainObject(value)) {
        if (isNestedSelector(property)) {
          renderer._renderStyleToCache(className, value, pseudo + normalizeNestedProperty(property), media, support);
        } else if (isMediaQuery(property)) {
          var combinedMediaQuery = generateCombinedMediaQuery(media, property.slice(6).trim());

          renderer._renderStyleToCache(className, value, pseudo, combinedMediaQuery, support);
        } else if (isSupport(property)) {
          var combinedSupport = generateCombinedMediaQuery(support, property.slice(9).trim());
          renderer._renderStyleToCache(className, value, pseudo, media, combinedSupport);
        } else {
          // TODO: warning
        }
      } else if (!isUndefinedValue(value)) {
        ruleset[property] = value;
      }

      return ruleset;
    }, {});

    if (Object.keys(ruleSet).length > 0) {
      var css = cssifyObject(ruleSet);
      var selector = generateCSSSelector(className, pseudo);

      var change = {
        type: RULE_TYPE,
        className: className,
        selector: selector,
        declaration: css,
        media: media
      };

      var declarationReference = selector + media + support;
      renderer.cache[declarationReference] = change;
      renderer._emitChange(change);
    }
  };

  renderer._renderStyleToClassNames = function (style, rule) {
    if (Object.keys(style).length < 1) {
      return '';
    }

    var localRulePrefix = renderer.prettySelectors && (rule.ruleName || rule.name) ? (rule.ruleName || rule.name) + '_' : '';

    var className = generateMonolithicClassName(style, (renderer.selectorPrefix || '') + (rule.selectorPrefix || localRulePrefix));

    if (!renderer.cache.hasOwnProperty(className)) {
      renderer._renderStyleToCache(className, style);
      renderer.cache[className] = {};
    }

    return className;
  };

  renderer.renderRule = function (rule) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var processedStyle = processStyleWithPlugins(renderer, rule(props, renderer), RULE_TYPE, props);
    return renderer._renderStyleToClassNames(processedStyle, rule);
  };

  return renderer;
}

export default function monolithic() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return function (renderer) {
    return useMonolithicRenderer(renderer, process.env.NODE_ENV !== 'production' && options.prettySelectors);
  };
}